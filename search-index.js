var searchIndex = {};
searchIndex['soa'] = {"items":[[0,"","soa","Growable struct-of-array types with 16-byte aligned heap allocated contents.",null,null],[0,"soa2","","",null,null],[3,"Soa2","soa::soa2","A growable struct-of-2-arrays type, with heap allocated contents.",null,null],[11,"new","","Constructs a new, empty `Soa2`.",0,{"inputs":[{"name":"soa2"}],"output":{"name":"soa2"}}],[11,"with_capacity","","Constructs a new, empty `Soa2` with the specified capacity.",0,{"inputs":[{"name":"soa2"},{"name":"usize"}],"output":{"name":"soa2"}}],[11,"from_raw_parts","","Constructs a `Soa2` directly from the raw components of another.",0,null],[11,"from_raw_bufs","","Constructs a `Soa2` by copying the elements from raw pointers.",0,null],[11,"from_vecs","","Constructs a `Soa2` directly from vectors of its components.",0,{"inputs":[{"name":"soa2"},{"name":"vec"},{"name":"vec"}],"output":{"name":"soa2"}}],[11,"len","","Returns the number of tuples stored in the SoA.",0,{"inputs":[{"name":"soa2"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the SoA contains no elements.",0,{"inputs":[{"name":"soa2"}],"output":{"name":"bool"}}],[11,"set_len","","Sets the length of a vector.",0,{"inputs":[{"name":"soa2"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the number of elements the SoA can hold without reallocating.",0,{"inputs":[{"name":"soa2"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given SoA. The collection may reserve more space to avoid frequent\nreallocations.",0,{"inputs":[{"name":"soa2"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given SoA. Does nothing if the capacity is already\nsufficient.",0,{"inputs":[{"name":"soa2"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the SoA as much as possible.",0,{"inputs":[{"name":"soa2"}],"output":null}],[11,"truncate","","Shorten a SoA, dropping excess elements.",0,{"inputs":[{"name":"soa2"},{"name":"usize"}],"output":null}],[11,"as_mut_slices","","Returns mutable slices over the SoA's elements.",0,null],[11,"as_slices","","Returns slices over the SoA's elements.",0,null],[11,"iters","","Returns iterators over the SoA's elements.",0,null],[11,"zip_iter","","Returns a single iterator over the SoA's elements, zipped up.",0,{"inputs":[{"name":"soa2"}],"output":{"name":"zip"}}],[11,"iters_mut","","Returns mutable iterators over the SoA's elements.",0,null],[11,"zip_iter_mut","","Returns a single iterator over the SoA's elements, zipped up.",0,{"inputs":[{"name":"soa2"}],"output":{"name":"zip"}}],[11,"into_iters","","Converts an SoA into iterators for each of its arrays.",0,null],[11,"into_vecs","","Converts an SoA into a pair of `Vec`s. This will neither allocator nor\ncopy.",0,null],[11,"as_ptrs","","Returns a pair of pointers to the start of the data in an SoA.",0,null],[11,"as_mut_ptrs","","Returns a pair of pointers to the start of the mutable data in an SoA.",0,null],[11,"swap_remove","","Removes an element from anywhere in the SoA and returns it, replacing it\nwith the last element.",0,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `index` one position to the right.",0,null],[11,"remove","","Removes and returns the elements at position `index` within the SoA,\nshifting all elements after position `index` one position to the left.",0,null],[11,"retain","","Returns only the element specified by the predicate.",0,{"inputs":[{"name":"soa2"},{"name":"f"}],"output":null}],[11,"push","","Appends an element to the back of a collection.",0,null],[11,"pop","","Removes the last element from a SoA and returns it, or `None` if empty.",0,{"inputs":[{"name":"soa2"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",0,{"inputs":[{"name":"soa2"},{"name":"self"}],"output":null}],[11,"clear","","Clears the SoA, removing all values.",0,{"inputs":[{"name":"soa2"}],"output":null}],[11,"extend","","Extends the SoA with the elements yielded by arbitrary iterators.",0,{"inputs":[{"name":"soa2"},{"name":"i0"},{"name":"i1"}],"output":null}],[11,"from_iters","","Constructs an `Soa2` with elements yielded by arbitrary iterators.",0,{"inputs":[{"name":"soa2"},{"name":"i0"},{"name":"i1"}],"output":{"name":"soa2"}}],[11,"resize","","Resizes the SoA in-place so that `len()` is equal to `new_len`.",0,null],[11,"push_all","","Appends all elements in slices to the SoA.",0,null],[11,"clone","","",0,{"inputs":[{"name":"soa2"}],"output":{"name":"soa2"}}],[11,"clone_from","","",0,{"inputs":[{"name":"soa2"},{"name":"soa2"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"soa2"},{"name":"h"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"soa2"},{"name":"soa2"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"soa2"},{"name":"soa2"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"soa2"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"soa2"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"soa2"},{"name":"soa2"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"soa2"},{"name":"soa2"}],"output":{"name":"ordering"}}],[11,"default","","",0,{"inputs":[{"name":"soa2"}],"output":{"name":"soa2"}}],[11,"fmt","","",0,{"inputs":[{"name":"soa2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"soa2"}],"output":null}],[0,"soa3","soa","",null,null],[3,"Soa3","soa::soa3","A growable struct-of-3-arrays type, with heap allocated contents.",null,null],[11,"new","","Constructs a new, empty `Soa3`.",1,{"inputs":[{"name":"soa3"}],"output":{"name":"soa3"}}],[11,"with_capacity","","Constructs a new, empty `Soa3` with the specified capacity.",1,{"inputs":[{"name":"soa3"},{"name":"usize"}],"output":{"name":"soa3"}}],[11,"from_raw_parts","","Constructs a `Soa3` directly from the raw components of another.",1,null],[11,"from_raw_bufs","","Constructs a `Soa3` by copying the elements from raw pointers.",1,null],[11,"from_vecs","","Constructs a `Soa3` directly from vectors of its components.",1,{"inputs":[{"name":"soa3"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"soa3"}}],[11,"len","","Returns the number of tuples stored in the SoA.",1,{"inputs":[{"name":"soa3"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the SoA contains no elements.",1,{"inputs":[{"name":"soa3"}],"output":{"name":"bool"}}],[11,"set_len","","Sets the length of a vector.",1,{"inputs":[{"name":"soa3"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the number of elements the SoA can hold without reallocating.",1,{"inputs":[{"name":"soa3"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given SoA. The collection may reserve more space to avoid frequent\nreallocations.",1,{"inputs":[{"name":"soa3"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given SoA. Does nothing if the capacity is already\nsufficient.",1,{"inputs":[{"name":"soa3"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the SoA as much as possible.",1,{"inputs":[{"name":"soa3"}],"output":null}],[11,"truncate","","Shorten a SoA, dropping excess elements.",1,{"inputs":[{"name":"soa3"},{"name":"usize"}],"output":null}],[11,"as_mut_slices","","Returns mutable slices over the SoA's elements.",1,null],[11,"as_slices","","Returns slices over the SoA's elements.",1,null],[11,"iters","","Returns iterators over the SoA's elements.",1,null],[11,"zip_iter","","Returns a single iterator over the SoA's elements, zipped up.",1,{"inputs":[{"name":"soa3"}],"output":{"name":"map"}}],[11,"iters_mut","","Returns mutable iterators over the SoA's elements.",1,null],[11,"zip_iter_mut","","Returns a single iterator over the SoA's elements, zipped up.",1,{"inputs":[{"name":"soa3"}],"output":{"name":"map"}}],[11,"into_iters","","Converts an SoA into iterators for each of its arrays.",1,null],[11,"into_vecs","","Converts an SoA into `Vec`s. This will neither allocator nor copy.",1,null],[11,"as_ptrs","","Returns to the start of the data in an SoA.",1,null],[11,"as_mut_ptrs","","Returns a pair of pointers to the start of the mutable data in an SoA.",1,null],[11,"swap_remove","","Removes an element from anywhere in the SoA and returns it, replacing it\nwith the last element.",1,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `index` one position to the right.",1,null],[11,"remove","","Removes and returns the elements at position `index` within the SoA,\nshifting all elements after position `index` one position to the left.",1,null],[11,"retain","","Returns only the element specified by the predicate.",1,{"inputs":[{"name":"soa3"},{"name":"f"}],"output":null}],[11,"push","","Appends an element to the back of a collection.",1,null],[11,"pop","","Removes the last element from a SoA and returns it, or `None` if empty.",1,{"inputs":[{"name":"soa3"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",1,{"inputs":[{"name":"soa3"},{"name":"self"}],"output":null}],[11,"clear","","Clears the SoA, removing all values.",1,{"inputs":[{"name":"soa3"}],"output":null}],[11,"extend","","Extends the SoA with the elements yielded by arbitrary iterators.",1,{"inputs":[{"name":"soa3"},{"name":"i0"},{"name":"i1"},{"name":"i2"}],"output":null}],[11,"from_iters","","Constructs an `Soa3` with elements yielded by arbitrary iterators.",1,{"inputs":[{"name":"soa3"},{"name":"i0"},{"name":"i1"},{"name":"i2"}],"output":{"name":"soa3"}}],[11,"resize","","Resizes the SoA in-place so that `len()` is equal to `new_len`.",1,null],[11,"push_all","","Appends all elements in slices to the SoA.",1,null],[11,"clone","","",1,{"inputs":[{"name":"soa3"}],"output":{"name":"soa3"}}],[11,"clone_from","","",1,{"inputs":[{"name":"soa3"},{"name":"soa3"}],"output":null}],[11,"hash","","",1,{"inputs":[{"name":"soa3"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"soa3"},{"name":"soa3"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"soa3"},{"name":"soa3"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"soa3"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"soa3"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"soa3"},{"name":"soa3"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"soa3"},{"name":"soa3"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[{"name":"soa3"}],"output":{"name":"soa3"}}],[11,"fmt","","",1,{"inputs":[{"name":"soa3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"soa3"}],"output":null}],[0,"soa4","soa","",null,null],[3,"Soa4","soa::soa4","A growable struct-of-4-arrays type, with heap allocated contents.",null,null],[11,"new","","Constructs a new, empty `Soa4`.",2,{"inputs":[{"name":"soa4"}],"output":{"name":"soa4"}}],[11,"with_capacity","","Constructs a new, empty `Soa4` with the specified capacity.",2,{"inputs":[{"name":"soa4"},{"name":"usize"}],"output":{"name":"soa4"}}],[11,"from_raw_parts","","Constructs a `Soa4` directly from the raw components of another.",2,null],[11,"from_raw_bufs","","Constructs a `Soa4` by copying the elements from raw pointers.",2,null],[11,"from_vecs","","Constructs a `Soa4` directly from vectors of its components.",2,{"inputs":[{"name":"soa4"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"soa4"}}],[11,"len","","Returns the number of tuples stored in the SoA.",2,{"inputs":[{"name":"soa4"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the SoA contains no elements.",2,{"inputs":[{"name":"soa4"}],"output":{"name":"bool"}}],[11,"set_len","","Sets the length of a vector.",2,{"inputs":[{"name":"soa4"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the number of elements the SoA can hold without reallocating.",2,{"inputs":[{"name":"soa4"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given SoA. The collection may reserve more space to avoid frequent\nreallocations.",2,{"inputs":[{"name":"soa4"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given SoA. Does nothing if the capacity is already\nsufficient.",2,{"inputs":[{"name":"soa4"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the SoA as much as possible.",2,{"inputs":[{"name":"soa4"}],"output":null}],[11,"truncate","","Shorten a SoA, dropping excess elements.",2,{"inputs":[{"name":"soa4"},{"name":"usize"}],"output":null}],[11,"as_mut_slices","","Returns mutable slices over the SoA's elements.",2,null],[11,"as_slices","","Returns slices over the SoA's elements.",2,null],[11,"iters","","Returns iterators over the SoA's elements.",2,null],[11,"zip_iter","","Returns a single iterator over the SoA's elements, zipped up.",2,{"inputs":[{"name":"soa4"}],"output":{"name":"map"}}],[11,"iters_mut","","Returns mutable iterators over the SoA's elements.",2,null],[11,"zip_iter_mut","","Returns a single iterator over the SoA's elements, zipped up.",2,{"inputs":[{"name":"soa4"}],"output":{"name":"map"}}],[11,"into_iters","","Converts an SoA into iterators for each of its arrays.",2,null],[11,"into_vecs","","Converts an SoA into `Vec`s. This will neither allocator nor copy.",2,null],[11,"as_ptrs","","Returns to the start of the data in an SoA.",2,null],[11,"as_mut_ptrs","","Returns a pair of pointers to the start of the mutable data in an SoA.",2,null],[11,"swap_remove","","Removes an element from anywhere in the SoA and returns it, replacing it\nwith the last element.",2,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `index` one position to the right.",2,null],[11,"remove","","Removes and returns the elements at position `index` within the SoA,\nshifting all elements after position `index` one position to the left.",2,null],[11,"retain","","Returns only the element specified by the predicate.",2,{"inputs":[{"name":"soa4"},{"name":"f"}],"output":null}],[11,"push","","Appends an element to the back of a collection.",2,null],[11,"pop","","Removes the last element from a SoA and returns it, or `None` if empty.",2,{"inputs":[{"name":"soa4"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",2,{"inputs":[{"name":"soa4"},{"name":"self"}],"output":null}],[11,"clear","","Clears the SoA, removing all values.",2,{"inputs":[{"name":"soa4"}],"output":null}],[11,"extend","","Extends the SoA with the elements yielded by arbitrary iterators.",2,{"inputs":[{"name":"soa4"},{"name":"i0"},{"name":"i1"},{"name":"i2"},{"name":"i3"}],"output":null}],[11,"from_iters","","Constructs an `Soa4` with elements yielded by arbitrary iterators.",2,{"inputs":[{"name":"soa4"},{"name":"i0"},{"name":"i1"},{"name":"i2"},{"name":"i3"}],"output":{"name":"soa4"}}],[11,"resize","","Resizes the SoA in-place so that `len()` is equal to `new_len`.",2,null],[11,"push_all","","Appends all elements in slices to the SoA.",2,null],[11,"clone","","",2,{"inputs":[{"name":"soa4"}],"output":{"name":"soa4"}}],[11,"clone_from","","",2,{"inputs":[{"name":"soa4"},{"name":"soa4"}],"output":null}],[11,"hash","","",2,{"inputs":[{"name":"soa4"},{"name":"h"}],"output":null}],[11,"eq","","",2,{"inputs":[{"name":"soa4"},{"name":"soa4"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"soa4"},{"name":"soa4"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"soa4"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"soa4"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"soa4"},{"name":"soa4"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"soa4"},{"name":"soa4"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[{"name":"soa4"}],"output":{"name":"soa4"}}],[11,"fmt","","",2,{"inputs":[{"name":"soa4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",2,{"inputs":[{"name":"soa4"}],"output":null}]],"paths":[[3,"Soa2"],[3,"Soa3"],[3,"Soa4"]]};
initSearch(searchIndex);
